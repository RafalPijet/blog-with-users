{"version":3,"sources":["utils/functions.js","redux/actions/postsActions.js","redux/reducers/postsReducer.js","redux/actions/requestActions.js","redux/reducers/requestReducer.js","redux/actions/usersActions.js","redux/reducers/usersReducer.js","redux/store.js","components/layouts/PageContainer/PageContainer.js","components/common/Logo/Logo.js","components/layouts/MainMenu/MainMenu.js","components/features/LoggedUser/LoggedUser.js","components/features/NavBar/NavBar.js","components/layouts/MainLayout/MainLayout.js","components/common/PageTitle/PageTitle.js","components/features/PostsCounter/PostsCounter.js","components/features/PostsCounter/PostsCounterContainer.js","components/common/SmallTitle/SmallTitle.js","components/common/Button/Button.js","components/common/HtmlBox/HtmlBox.js","components/common/SectionTitle/SectionTitle.js","components/features/PostSummary/PostSummary.js","components/features/PostsList/PostsList.js","components/common/SpinnerRequest/SpinnerRequest.js","components/common/Alert/Alert.js","components/common/Pagination/Pagination.js","components/features/Posts/Posts.js","config.js","components/features/Posts/PostsContainer.js","redux/thunks.js","components/pages/Posts/PostPage.js","components/pages/Home/Home.js","components/pages/Contact/Contact.js","components/pages/PageNotFound/PageNotFound.js","components/common/TextField/TextField.js","components/features/UserForm/UserForm.js","components/features/UserForm/UserFormContainer.js","components/pages/Login/Login.js","components/pages/Registration/Registration.js","components/pages/Welcome/Welcome.js","components/features/PostForm/PostForm.js","components/features/PostForm/PostFormatContainer.js","components/pages/AddPost/AddPost.js","components/common/Modal/Modal.js","components/features/CommentsList/CommentsList.js","components/features/Comments/Comments.js","components/features/Comments/CommentsContainer.js","components/features/PostItem/PostItem.js","components/features/PostItem/PostItemContainer.js","components/pages/RandomPost/RandomPost.js","components/pages/SinglePost/SinglePost.js","components/pages/EditPost/EditPost.js","components/pages/UserPosts/UserPosts.js","components/pages/Logout/Logout.js","App.js","index.js","image/blog.jpg"],"names":["createActionName","reducerName","name","checkUserPosts","user","postId","result","posts","forEach","post","id","LOAD_POST","LOAD_POSTS_RANGE","THUMB_UP","THUMB_DOWN","SET_INITIAL_PAGE","loadPostsByRange","payload","type","loadPost","thumbUp","thumbDown","getPosts","store","data","getPost","singlePost","getAmountOfComments","comments","length","getInitialPaginationPage","initialPage","initialState","amount","postsPerPage","reducer","state","action","map","votes","value","START_REQUEST","STOP_REQUEST","ERROR_REQUEST","RESET_REQUEST","BEGIN_SET_VOTES","USER_POSTS_MODE","REMOVE_REQUEST","startRequest","stopRequest","errorRequest","error","resetRequest","beginSetVotes","userPostsMode","isSet","removeRequest","getRequest","request","pending","success","userPosts","remove","SET_LOGIN","SET_USER","UPDATE_USER_POST","ADD_USER_COMMENT","REMOVE_USER_POST","setLogin","isLogin","setUser","updateUserPost","removeUserPost","getUser","users","getAmountUserPosts","comment","filter","reducers","combineReducers","createStore","applyMiddleware","thunk","PageContainer","children","className","Logo","image","src","alt","MainMenu","links","location","link","index","key","pathname","path","to","title","withRouter","props","LoggedUser","hidden","firstName","lastName","NavBar","mainLinks","loginLinks","this","loggedUser","logo","React","Component","MainLayout","PageTitle","PostsCounter","content","contentHandling","amountUserPosts","setState","nextProps","connect","SmallTitle","otherProps","Button","variant","HtmlBox","ReactHtmlParser","SectionTitle","PostSummary","isWorking","isBusy","thumbHandling","isUp","a","votesHandling","author","maxLength","cutOutText","substr","checkChar","substring","lastIndexOf","cutText","disabled","onClick","style","marginRight","PostsList","SpinnerRequest","Spinner","color","size","width","height","Alert","isVisible","animationIn","animationOut","icon","Pagination","isActive","presentPage","leftArrowIsHidden","rightArrowIsHidden","setArrows","pages","changePage","newPage","onPageChange","nextContext","Array","el","page","Posts","setThumb","changePostsHandling","loadPosts","isUserPosts","prepareUserPosts","loadUserPosts","slice","isLastPosts","API_URL","Math","ceil","dispatch","start","limit","axios","get","res","selectedPosts","message","loadPostsByRangeRequest","put","status","setThumbRequest","Contact","PageNotFound","TextField","label","onChange","UserForm","login","email","password","register","emailRegister","passwordRegister","confirmPassword","handleChange","event","target","sendLoginData","loadUser","addUser","preventDefault","includes","setTimeout","countVisible","params","loadUserByLogin","Login","Registration","Welcome","PostForm","authorId","handleEdit","text","sendPost","addPost","updatePost","isEdit","Object","entries","onSubmit","options","placeholder","toolbar","buttons","addPostRequest","updatePostRequest","AddPost","Modal","modal","toggle","prevState","setModal","headerContent","bodyContent","confirmButton","confirmHandling","isOpen","ModalHeader","ModalBody","ModalFooter","CommentsList","countDate","dateAdded","min","hrs","days","different","Date","floor","toFixed","rest","i","_id","propsTypes","PropTypes","arrayOf","shape","string","isRequired","Comments","isAddVisible","sortValue","commentsForPage","handlingSort","compareDatesFromOldest","compareDatesFromNewest","compareUsersAz","compareUsersZa","unsorted","sorted","item","parse","push","sort","b","comparision","handleSortType","handleComment","handleAddComment","addComment","begin","Promise","resolve","then","htmlFor","getState","addCommentToPost","PostItem","singleHandling","randomHandling","randomPost","removeHandling","removePost","isRandom","loadPostRequest","userId","delete","removePostRequest","RandomPost","SinglePost","match","EditPost","UserPosts","setInitialPage","userPostsAmount","App","exact","component","Home","PostPage","Logout","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.77b43a2b.chunk.js","sourcesContent":["export const createActionName = (reducerName, name) => `app/${reducerName}/${name}`;\nexport const cutText = (content, maxLength) => {\n\n    if (maxLength > 0) {\n\n        if (maxLength < content.length) {\n            let cutOutText = content.substr(0, maxLength + 1);\n            let checkChar = cutOutText.substring(cutOutText.length - 1, cutOutText.length);\n\n            if (checkChar === \" \") {\n                return `${cutOutText.substring(0, cutOutText.length - 1)}...`;\n            } else {\n                return `${cutOutText.substr(0, cutOutText.lastIndexOf(\" \"))}...`;\n            }\n        } else {\n            return content;\n        }\n    } else {\n        return \"Error\";\n    }\n};\nexport const checkUserPosts = (user, postId) => {\n    let result = false;\n    user.posts.forEach(post => {\n\n        if (post.id === postId) {\n            result = true\n        }});\n    return result\n};\n\n","import {createActionName} from \"../../utils/functions\";\n\nconst reducerName = \"posts\";\n\n// ACTIONS TYPE\nexport const LOAD_POST = createActionName(reducerName, \"LOAD_POST\");\nexport const LOAD_POSTS_RANGE = createActionName(reducerName, \"LOAD_POSTS_RANGE\");\nexport const THUMB_UP = createActionName(reducerName, \"THUMB_UP\");\nexport const THUMB_DOWN = createActionName(reducerName, \"THUMB_DOWN\");\nexport const SET_INITIAL_PAGE = createActionName(reducerName, \"SET_INITIAL_PAGE\");\n\n// CREATORS OF ACTIONS\nexport const loadPostsByRange = payload => ({payload, type: LOAD_POSTS_RANGE});\nexport const loadPost = post => ({post, type: LOAD_POST});\nexport const thumbUp = id => ({id, type: THUMB_UP});\nexport const thumbDown = id => ({id, type: THUMB_DOWN});\nexport const setInitialPage = value => ({value, type: SET_INITIAL_PAGE});\n\n// SELECTORS\nexport const getPosts = store => store.posts.data;\nexport const getAmount = store => store.posts.amount;\nexport const getPost = store => store.posts.singlePost;\nexport const getAmountOfComments = store => store.posts.singlePost.comments.length;\nexport const getInitialPaginationPage = store => store.posts.initialPage;\nexport const getPaginationPages = store => Math.ceil(store.posts.amount / store.posts.postsPerPage);\n\n","import {LOAD_POST, THUMB_UP, THUMB_DOWN, LOAD_POSTS_RANGE, SET_INITIAL_PAGE} from \"../actions/postsActions\";\n\nconst initialState = {\n    data: [],\n    singlePost: {},\n    amount: 0,\n    postsPerPage: 10,\n    initialPage: 1\n};\n\nconst reducer = (state = initialState, action = {}) => {\n    switch (action.type) {\n        case LOAD_POST:\n            return {...state, singlePost: action.post};\n        case LOAD_POSTS_RANGE:\n            return {\n                ...state,\n                data: [...action.payload.data],\n                amount: action.payload.amount,\n                postsPerPage: action.payload.postsPerPage,\n                initialPage: action.payload.initialPage\n            };\n        case THUMB_UP:\n            return {\n                ...state,\n                data: state.data.map(post => {\n\n                    if (post.id === action.id) {\n                        return {...post, votes: post.votes + 1};\n                    }\n                    return post;\n                })\n            };\n        case THUMB_DOWN:\n            return {\n                ...state,\n                data: state.data.map(post => {\n\n                    if (post.id === action.id) {\n                        return {...post, votes: post.votes - 1};\n                    }\n                    return post;\n                })\n            };\n        case SET_INITIAL_PAGE:\n            return {...state, initialPage: action.value};\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import {createActionName} from \"../../utils/functions\";\n\nconst reducerName = 'request';\n\n// ACTIONS\nexport const START_REQUEST = createActionName(reducerName, \"START_REQUEST\");\nexport const STOP_REQUEST = createActionName(reducerName, \"STOP_REQUEST\");\nexport const ERROR_REQUEST = createActionName(reducerName, \"ERROR_REQUEST\");\nexport const RESET_REQUEST = createActionName(reducerName, \"RESET_REQUEST\");\nexport const BEGIN_SET_VOTES = createActionName(reducerName, \"BEGIN_SET_VOTES\");\nexport const USER_POSTS_MODE = createActionName(reducerName, \"USER_POSTS_MODE\");\nexport const REMOVE_REQUEST = createActionName(reducerName, \"REMOVE_REQUEST\");\n\n// CREATORS OF ACTIONS\nexport const startRequest = () => ({type: START_REQUEST});\nexport const stopRequest = () => ({type: STOP_REQUEST});\nexport const errorRequest = error => ({error, type: ERROR_REQUEST});\nexport const resetRequest = () => ({type: RESET_REQUEST});\nexport const beginSetVotes = () => ({type: BEGIN_SET_VOTES});\nexport const userPostsMode = isSet => ({isSet, type: USER_POSTS_MODE});\nexport const removeRequest = isSet => ({isSet, type: REMOVE_REQUEST});\n\n// SELECTORS\nexport const getRequest = store => store.request;\n","import {\n    START_REQUEST,\n    STOP_REQUEST,\n    ERROR_REQUEST,\n    RESET_REQUEST,\n    BEGIN_SET_VOTES,\n    USER_POSTS_MODE,\n    REMOVE_REQUEST\n} from \"../actions/requestActions\";\n\nconst initialState = {pending: false, error: null, success: null, votes: false, userPosts: false, remove: false};\n\nconst reducer = (state = initialState, action = {}) => {\n    switch (action.type) {\n        case START_REQUEST:\n            return {...state, pending: true, error: null, success: null, votes: false};\n        case STOP_REQUEST:\n            return {...state, pending: false, error: null, success: true, votes: false};\n        case ERROR_REQUEST:\n            return {...state, pending: false, error: action.error, success: false, votes: false};\n        case RESET_REQUEST:\n            return {...state, pending: false, error: null, success: null, votes: false};\n        case BEGIN_SET_VOTES:\n            return {...state, pending: false, error: null, success: null, votes: true};\n        case USER_POSTS_MODE:\n            return {...state, userPosts: action.isSet};\n        case REMOVE_REQUEST:\n            return {...state, remove: action.isSet};\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import {createActionName} from \"../../utils/functions\";\n\nconst reducerName = \"users\";\n\n// ACTIONS TYPE\nexport const SET_LOGIN = createActionName(reducerName, \"SET_LOGIN\");\nexport const SET_USER = createActionName(reducerName, \"SET_USER\");\nexport const UPDATE_USER_POST = createActionName(reducerName, \"UPDATE_USER_POST\");\nexport const ADD_USER_COMMENT = createActionName(reducerName, \"ADD_USER_COMMENT\");\nexport const REMOVE_USER_POST = createActionName(reducerName, \"REMOVE_USER_POST\");\n\n// CREATORS OF ACTIONS\nexport const setLogin = isLogin => ({isLogin, type: SET_LOGIN});\nexport const setUser = user => ({user, type: SET_USER});\nexport const updateUserPost = post => ({post, type: UPDATE_USER_POST});\nexport const addUserComment = comment => ({comment, type: ADD_USER_COMMENT});\nexport const removeUserPost = id => ({id, type: REMOVE_USER_POST});\n\n// SELECTORS\nexport const getLogin = store => store.users.isLogin;\nexport const getUser = store => store.users.user;\nexport const getAmountUserPosts = store => store.users.user.posts.length;\n","import {\n    SET_LOGIN,\n    SET_USER,\n    UPDATE_USER_POST,\n    ADD_USER_COMMENT,\n    REMOVE_USER_POST\n} from \"../actions/usersActions\";\n\nconst initialState = {\n    isLogin: false,\n    user: {}\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_LOGIN:\n            return {...state, isLogin: action.isLogin};\n        case SET_USER:\n            return {...state, user: action.user};\n        case UPDATE_USER_POST:\n            return {\n                ...state,\n                user: {\n                    ...state.user, posts: state.user.posts.map(post => {\n\n                        if (post.id === action.post.id) {\n                            return action.post;\n                        } else {\n                            return post;\n                        }\n                    })\n                }\n            };\n        case ADD_USER_COMMENT:\n            return {\n                ...state,\n                user: {\n                    ...state.user, posts: state.user.posts.map(post => {\n\n                        if (post.id === action.comment.postId) {\n                            return {...post, comments: [...post.comments, action.comment]}\n                        } else {\n                            return post;\n                        }\n                    })\n                }\n            };\n        case REMOVE_USER_POST:\n            return {\n                ...state,\n                user: {\n                    ...state.user, posts: state.user.posts.filter(post => (post.id !== action.id))\n                }\n            };\n        default:\n            return state\n    }\n};\n\nexport default reducer;\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport posts from './reducers/postsReducer';\nimport request from './reducers/requestReducer';\nimport users from './reducers/usersReducer';\nimport thunk from 'redux-thunk';\n\nconst reducers = combineReducers({\n    posts,\n    request,\n    users\n});\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PageContainer.scss';\n\nconst PageContainer = ({ children }) => (\n  <div className=\"container-fluid\">\n    {children}\n  </div>\n);\n\nPageContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default PageContainer;\n","import React from 'react'\r\n\r\nimport './Logo.scss';\r\n\r\nconst Logo = ({ image, name }) => (\r\n  <img className=\"logo\" src={image} alt={name}/>\r\n);\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './MainMenu.scss';\r\n\r\nconst MainMenu = ({ links, location }) => (\r\n  <ul className=\"main-menu\">\r\n    { links.map((link, index) =>\r\n      <li key={index}>\r\n        <Link className={(location.pathname === link.path && 'active') || ''} to={link.path}>{link.title}</Link>\r\n      </li>\r\n    )}\r\n  </ul>\r\n);\r\n\r\nMainMenu.propTypes = {\r\n  links: PropTypes.arrayOf(PropTypes.shape({\r\n    path: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired\r\n  })),\r\n};\r\n\r\nexport default withRouter(props => <MainMenu {...props}/>);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LoggedUser = ({hidden, firstName, lastName}) => (\n    <p hidden={hidden}><span>logged as:</span>{` ${firstName} ${lastName}`}</p>\n);\n\nLoggedUser.propTypes = {\n    hidden: PropTypes.bool.isRequired,\n    firstName: PropTypes.string,\n    lastName: PropTypes.string\n};\n\nexport default LoggedUser;\n","import React from 'react';\nimport Logo from '../../common/Logo/Logo';\nimport MainMenu from '../../layouts/MainMenu/MainMenu';\nimport LoggedUser from '../../features/LoggedUser/LoggedUser';\nimport './NavBar.scss';\nimport logo from '../../../image/blog.jpg';\n\nclass NavBar extends React.Component {\n    state = {\n        mainLinks: [\n            {path: \"/\", title: \"Home\"},\n            {path: \"/posts/new\", title: \"Add post\"},\n            {path: \"/posts\", title: \"Posts\"},\n            {path: \"/posts/random\", title: \"Random post\"},\n            {path: \"/contact\", title: \"Contact\"},\n            {path: \"/user\", title: \"User Posts\"},\n            {path: \"/logout\", title: \"logOut\"}\n        ],\n        loginLinks: [\n            {path: \"/login\", title: \"LogIn\"},\n            {path: \"/registration\", title: \"Registration\"}\n        ]\n    };\n\n    render() {\n        const {mainLinks, loginLinks} = this.state;\n        const {isLogin, loggedUser} = this.props;\n        return (\n            <div className=\"navbar\">\n                <Logo image={logo} name=\"logo\"/>\n                <div className=\"menu-box\">\n                    <MainMenu links={isLogin ? mainLinks : loginLinks}/>\n                    <LoggedUser firstName={isLogin ? loggedUser.firstName : ''} hidden={!isLogin}\n                                lastName={isLogin ? loggedUser.lastName : ''}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport PageContainer from '../../layouts/PageContainer/PageContainer';\nimport NavBar from '../../features/NavBar/NavBar';\n\nconst MainLayout = ({children, isLogin, loggedUser}) => (\n    <PageContainer>\n        <NavBar isLogin={isLogin} loggedUser={loggedUser}/>\n        {children}\n    </PageContainer>\n);\n\nexport default MainLayout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PageTitle.scss';\n\nconst PageTitle = ({ children }) => (\n  <h1 className=\"page-title\">\n     {children}\n  </h1>\n);\n\nPageTitle.propTypes = {\n  children: PropTypes.string,\n};\n\nexport default PageTitle;\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nclass PostsCounter extends React.Component {\n\n    state = {\n        content: '- no posts -'\n    };\n\n    componentDidMount() {\n        this.contentHandling(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.contentHandling(nextProps);\n    }\n\n    contentHandling = props => {\n        const {amount, request, amountUserPosts} = props;\n\n        if (request.pending) {\n            this.setState({content: 'calculation...'})\n        } else if (!request.userPosts && amount !== 0) {\n            this.setState({content: amount})\n        } else if (request.userPosts && amountUserPosts !== 0) {\n            this.setState({content: amountUserPosts})\n        } else {\n            this.setState({content: '- no posts -'})\n        }\n    };\n\n    render() {\n        const {content} = this.state;\n        return (\n            <p>{`Posts amount: ${content}`}</p>\n        )\n    }\n}\n\nexport default PostsCounter;\n","import {connect} from 'react-redux';\nimport PostsCounter from './PostsCounter';\nimport {getAmount, getPosts} from \"../../../redux/actions/postsActions\";\nimport {getRequest} from \"../../../redux/actions/requestActions\";\nimport {getAmountUserPosts} from \"../../../redux/actions/usersActions\";\n\nconst mapStateToProps = state => ({\n    amount: getAmount(state),\n    posts: getPosts(state),\n    request: getRequest(state),\n    amountUserPosts: getAmountUserPosts(state)\n});\n\nexport default connect(mapStateToProps)(PostsCounter)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './SmallTitle.scss';\n\nconst SmallTitle = ({ children, ...otherProps }) => (\n  <h2 {...otherProps} className=\"small-title\">\n    { children }\n  </h2>\n);\n\nSmallTitle.propTypes = {\n  children: PropTypes.string,\n};\n\nexport default SmallTitle;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = ({ variant = '', children, ...otherProps }) => (\r\n  <button { ...otherProps } className={ `button button--${variant}`}>\r\n    { children }\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactHtmlParser from 'react-html-parser';\n\nconst HtmlBox = ({children}) => (\n    <div>\n        {ReactHtmlParser(children)}\n    </div>\n);\n\nHtmlBox.propTypes = {\n  children: PropTypes.string\n};\n\nexport default HtmlBox;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './SectionTitle.scss';\r\n\r\nconst SectionTitle = ({ children }) => (\r\n  <span className=\"section-title\">\r\n     {children}\r\n  </span>\r\n);\r\n\r\nSectionTitle.propTypes = {\r\n  children: PropTypes.string,\r\n};\r\n\r\nexport default SectionTitle;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from \"react-router-dom\";\nimport SmallTitle from '../../common/SmallTitle/SmallTitle';\nimport Button from '../../common/Button/Button';\nimport HtmlBox from '../../common/HtmlBox/HtmlBox';\nimport {cutText} from '../../../utils/functions';\nimport {FaThumbsDown, FaThumbsUp} from \"react-icons/fa\";\nimport SectionTitle from '../../common/SectionTitle/SectionTitle';\nimport './PostSummary.scss';\n\nclass PostSummary extends React.Component {\n    state = {\n        isWorking: false,\n        isBusy: false\n    };\n\n    componentDidMount() {\n        const {user, author} = this.props;\n        (author === `${user.firstName} ${user.lastName}`) ? this.setState({isBusy: true}) :\n            this.setState({isBusy: false});\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const {isWorking} = this.state;\n        const {user, author} = this.props;\n\n        if (author !== `${user.firstName} ${user.lastName}`) {\n            (nextProps.request.votes && isWorking) ? this.setState({isBusy: true}) :\n                this.setState({isBusy: false, isWorking: false});\n        }\n    }\n\n    thumbHandling = async (id, isUp) => {\n        const {votesHandling} = this.props;\n        await this.setState({isWorking: true});\n        votesHandling(id, isUp);\n    };\n\n    render() {\n        const {id, title, content, author, votes} = this.props;\n        const {thumbHandling} = this;\n        const {isBusy, isWorking} = this.state;\n        return (\n            <article className=\"post-summary\">\n                <SmallTitle>{title}</SmallTitle>\n                <div>\n                    <span>author: </span>\n                    <SectionTitle>{author}</SectionTitle>\n                </div>\n                <HtmlBox>{cutText(content, 80)}</HtmlBox>\n                <Link to={`/posts/${id}`}>\n                    <Button variant=\"info\">Read More</Button>\n                </Link>\n                <Button disabled={isBusy}\n                        variant={`success ${isBusy ? \"disabled-votes\" : ''} ${isWorking ? \"progress-votes\" : ''}`}\n                        onClick={() => thumbHandling(id, true)}>\n                    <FaThumbsUp/>\n                </Button>\n                <span style={{marginRight: '14px'}}>{votes}</span>\n                <Button disabled={isBusy}\n                        variant={`danger ${isBusy ? \"disabled-votes\" : ''} ${isWorking ? \"progress-votes\" : ''}`}\n                        onClick={() => votes > 0 ? thumbHandling(id, false) : []}>\n                    <FaThumbsDown/>\n                </Button>\n            </article>\n        )\n    }\n}\n\nPostSummary.propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n    author: PropTypes.string.isRequired,\n    votes: PropTypes.number.isRequired,\n    votesHandling: PropTypes.func.isRequired,\n    request: PropTypes.object.isRequired,\n    user: PropTypes.object.isRequired\n};\n\nexport default PostSummary;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PostSummary from '../PostSummary/PostSummary';\n\nconst PostsList = ({posts, votesHandling, request, user}) => (\n    <div>\n        {posts.map(post => <PostSummary\n            key={post.id}\n            {...post}\n            votesHandling={votesHandling}\n            request={request}\n            user={user}\n        />)}\n    </div>\n);\n\nPostsList.propTypes = {\n    posts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            title: PropTypes.string.isRequired,\n            content: PropTypes.string.isRequired,\n            author: PropTypes.string.isRequired,\n            votes: PropTypes.number.isRequired,\n            votesHandling: PropTypes.func\n        })\n    ),\n    votesHandling: PropTypes.func.isRequired,\n    request: PropTypes.object.isRequired,\n    user: PropTypes.object.isRequired,\n};\n\nexport default PostsList\n","import React from 'react';\nimport {Spinner} from 'reactstrap';\nimport './SpinnerRequest.scss';\n\nconst SpinnerRequest = () => (\n    <div className=\"spinner-main\">\n        <div className=\"spinner-box\">\n            <Spinner color=\"dark\" size=\"sm\"/>\n            <Spinner className=\"second-spinner\" type=\"grow\" color=\"danger\" style={{ width: '2rem', height: '2rem' }}/>\n        </div>\n        <div className=\"spinner-box\">\n            <Spinner color=\"dark\" size=\"sm\"/>\n            <Spinner className=\"second-spinner\" type=\"grow\" color=\"success\" style={{ width: '2rem', height: '2rem' }}/>\n        </div>\n        <div className=\"spinner-box\">\n            <Spinner color=\"dark\" size=\"sm\"/>\n            <Spinner className=\"second-spinner\" type=\"grow\" color=\"warning\" style={{ width: '2rem', height: '2rem' }}/>\n        </div>\n        <div className=\"spinner-box\">\n            <Spinner color=\"dark\" size=\"sm\"/>\n            <Spinner className=\"second-spinner\" type=\"grow\" color=\"primary\" style={{ width: '2rem', height: '2rem' }}/>\n        </div>\n    </div>\n\n);\n\nexport default SpinnerRequest;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Animated } from 'react-animated-css';\r\nimport { MdInfoOutline, MdDone, MdErrorOutline } from 'react-icons/md';\r\n\r\nimport './Alert.scss';\r\n\r\nconst Alert = ({ variant = '', children, isVisible, ...otherProps }) => {\r\n\r\n  const icon = () => {\r\n    switch(variant) {\r\n      case 'info':\r\n        return <MdInfoOutline />\r\n      case 'success':\r\n        return <MdDone />\r\n      case 'warning':\r\n        return <MdErrorOutline />\r\n      case 'error':\r\n        return <MdErrorOutline />\r\n      default:\r\n        return <MdInfoOutline />\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Animated className=\"alert-main\" animationIn=\"bounceIn\" animationOut=\"fadeOut\" isVisible={isVisible}>\r\n      <div {...otherProps} className={`alert alert--${variant}`}>\r\n        {icon()}\r\n        <span className=\"alert__desc\">{children}</span>\r\n      </div>\r\n    </Animated>\r\n  )\r\n\r\n};\r\n\r\nAlert.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Alert;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Pagination.scss';\n\nclass Pagination extends React.Component {\n    state = {\n        isActive: this.props.isActive || false,\n        presentPage: this.props.presentPage || 1,\n        leftArrowIsHidden: true,\n        rightArrowIsHidden: false\n    };\n\n    componentDidMount() {\n        const {presentPage, pages} = this.props;\n        this.setArrows(presentPage, pages);\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n\n        if (nextProps.presentPage) {\n            this.setArrows(nextProps.presentPage, nextProps.pages);\n        }\n    }\n\n    setArrows = (presentPage, pages) => {\n        presentPage > 1 ? this.setState({leftArrowIsHidden: false}) :\n            this.setState({leftArrowIsHidden: true, presentPage: presentPage});\n        presentPage < pages ? this.setState({rightArrowIsHidden: false}) :\n            this.setState({rightArrowIsHidden: true, presentPage: presentPage});\n    };\n\n    changePage = async (newPage, isUp) => {\n        const {onPageChange} = this.props;\n        const {presentPage} = this.state;\n\n        if (newPage) {\n            await this.setState({presentPage: newPage});\n\n        } else {\n            await isUp ? this.setState({presentPage: presentPage + 1}) :\n                this.setState({presentPage: presentPage - 1});\n        }\n        onPageChange(this.state.presentPage);\n    };\n\n    render() {\n        const {pages} = this.props;\n        const {presentPage, leftArrowIsHidden, rightArrowIsHidden, isActive} = this.state;\n        const {changePage} = this;\n\n        return (\n            <div hidden={!isActive} className=\"pagination\">\n                <ul className=\"pagination__list\">\n                    <li className=\"pagination__list__item\"\n                        hidden={leftArrowIsHidden}\n                        onClick={() => changePage(null,false)}>{\"<\"}</li>\n                    {[...Array(pages)].map((el, page) =>\n                        <li\n                            key={page++}\n                            className={`pagination__list__item${presentPage === page ? \" pagination__list__item--active\" : \"\"}`}\n                            onClick={() => changePage(page, null)}>\n                            {page}\n                        </li>\n                    )}\n                    <li className=\"pagination__list__item\"\n                        hidden={rightArrowIsHidden}\n                        onClick={() => changePage(null,true)}>{\">\"}</li>\n                </ul>\n            </div>\n        )\n    }\n}\n\nPagination.propTypes = {\n    pages: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    presentPage: PropTypes.number,\n    isActive: PropTypes.bool\n};\n\nexport default Pagination;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PostsList from '../PostsList/PostsList';\nimport SpinnerRequest from '../../common/SpinnerRequest/SpinnerRequest';\nimport Alert from '../../common/Alert/Alert';\nimport Pagination from \"../../common/Pagination/Pagination\";\n\nclass Posts extends React.Component {\n\n    componentDidMount() {\n        const {loadPosts, presentPage, postsPerPage, isLastPosts, isUserPosts} = this.props;\n        const {prepareUserPosts} = this;\n\n        if (isUserPosts) {\n            prepareUserPosts(presentPage);\n        } else {\n            isLastPosts ? loadPosts(1, postsPerPage || 3) : loadPosts(presentPage, postsPerPage || 3);\n        }\n    }\n\n    votesHandling = (id, isUp) => {\n        const {setThumb} = this.props;\n        setThumb(id, isUp);\n    };\n\n    changePostsHandling = page => {\n        const {postsPerPage, loadPosts, isUserPosts} = this.props;\n        const {prepareUserPosts} = this;\n        isUserPosts ? prepareUserPosts(page) : loadPosts(page, postsPerPage || 3);\n    };\n\n    prepareUserPosts = page => {\n        const {postsPerPage, loadUserPosts, user} = this.props;\n        let payload = {\n            data: user.posts.slice((page - 1) * postsPerPage, (page - 1) * postsPerPage + postsPerPage),\n            amount: user.posts.length,\n            postsPerPage: postsPerPage,\n            initialPage: page\n        };\n        loadUserPosts(payload)\n    };\n\n    render() {\n        const {posts, request, pages, presentPage, isActive, user, isUserPosts} = this.props;\n        const {votesHandling, changePostsHandling} = this;\n\n        if ((!request.pending && request.success && posts.length > 0) || request.votes ||\n            (isUserPosts && user.posts.length !== 0)) {\n            return (\n                <div>\n                    <PostsList user={user} posts={posts} votesHandling={votesHandling}\n                               request={request}/>\n                    <Pagination isActive={isActive} pages={pages}\n                                onPageChange={changePostsHandling} presentPage={presentPage}/>\n                </div>\n\n            )\n        } else if (request.pending || request.success === null) {\n            return <SpinnerRequest/>\n        } else if (!request.pending && request.error !== null) {\n            return <Alert variant=\"error\">{request.error}</Alert>\n        } else if ((!request.pending && request.success === true && posts.length === 0) ||\n            (isUserPosts && user.posts.length === 0)) {\n            return <Alert variant=\"info\">No posts</Alert>\n        }\n    }\n}\n\nPosts.propTypes = {\n    posts: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            title: PropTypes.string.isRequired,\n            content: PropTypes.string.isRequired,\n            author: PropTypes.string.isRequired,\n            votes: PropTypes.number.isRequired\n        })\n    ),\n    request: PropTypes.object.isRequired,\n    loadPosts: PropTypes.func.isRequired,\n    loadUserPosts: PropTypes.func.isRequired,\n    postsPerPage: PropTypes.number,\n    isActive: PropTypes.bool,\n    isLastPosts: PropTypes.bool,\n    user: PropTypes.object.isRequired,\n    isUserPosts: PropTypes.bool\n};\n\nexport default Posts;\n","export const API_URL = \" https://blog-lopez.herokuapp.com/api\";\n","import {connect} from 'react-redux';\nimport Posts from './Posts';\nimport {getPosts, getInitialPaginationPage, getPaginationPages, loadPostsByRange} from \"../../../redux/actions/postsActions\";\nimport {getRequest} from \"../../../redux/actions/requestActions\";\nimport {getUser} from \"../../../redux/actions/usersActions\";\nimport {setThumbRequest, loadPostsByRangeRequest} from \"../../../redux/thunks\";\n\nconst mapDispatchToProps = dispatch => ({\n    loadPosts: (page, postsPerPage) => dispatch(loadPostsByRangeRequest(page, postsPerPage)),\n    setThumb: (id, isUp) => dispatch(setThumbRequest(id, isUp)),\n    loadUserPosts: payload => dispatch(loadPostsByRange(payload))\n});\n\nconst mapStateToProps = state => ({\n    posts: getPosts(state),\n    request: getRequest(state),\n    pages: getPaginationPages(state),\n    presentPage: getInitialPaginationPage(state),\n    user: getUser(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);\n","import axios from \"axios\";\nimport {API_URL} from \"../config\";\nimport {loadPost, thumbUp, thumbDown, loadPostsByRange} from \"./actions/postsActions\";\nimport {startRequest, stopRequest, errorRequest, beginSetVotes, resetRequest, removeRequest} from \"./actions/requestActions\";\nimport {setLogin, setUser, updateUserPost, getUser, addUserComment, removeUserPost} from \"./actions/usersActions\";\nimport store from './store';\nimport {checkUserPosts} from \"../utils/functions\";\n\nexport const loadPostRequest = id => {\n    return async dispatch => {\n\n        dispatch(startRequest());\n\n        try {\n            let res = await axios.get(`${API_URL}/posts/${id}`);\n\n            if (res.data !== null) {\n                dispatch(loadPost(res.data));\n                dispatch(stopRequest());\n            } else {\n                dispatch(errorRequest(`Post with id:${id} don't exist`))\n            }\n\n        } catch (err) {\n            dispatch(errorRequest(err.message));\n        }\n    }\n};\n\nexport const addPostRequest = post => {\n    return async dispatch => {\n\n        dispatch(startRequest());\n\n        try {\n            let res = await axios.post(`${API_URL}/posts`, post);\n            dispatch(setUser(res.data));\n            dispatch(stopRequest());\n        } catch (err) {\n            dispatch(errorRequest(err.message));\n        }\n    }\n};\n\nexport const updatePostRequest = post => {\n    return async dispatch => {\n\n        dispatch(startRequest());\n\n        try {\n            let res = await axios.put(`${API_URL}/posts`, post);\n            dispatch(updateUserPost(res.data));\n            dispatch(stopRequest());\n        } catch (err) {\n            dispatch(errorRequest(err.message));\n        }\n    }\n};\n\nexport const setThumbRequest = (id, isUp) => {\n    return async dispatch => {\n\n        dispatch(beginSetVotes());\n\n        try {\n            let res = await axios.put(`${API_URL}/posts/${id}/${isUp}`);\n\n            if (res.status === 200) {\n                isUp ? dispatch(thumbUp(id)) : dispatch(thumbDown(id));\n            }\n            dispatch(stopRequest());\n        } catch (err) {\n            dispatch(errorRequest(`Can't change a votes level: ${err.message}`))\n        }\n    }\n};\n\nexport const randomPostRequest = () => {\n    return async dispatch => {\n\n        dispatch(startRequest());\n\n        try {\n            let post = await axios.get(`${API_URL}/posts/random`);\n            dispatch(loadPost(post.data));\n            dispatch(stopRequest());\n        } catch (err) {\n            dispatch(errorRequest(err.message));\n        }\n    }\n};\n\nexport const loadPostsByRangeRequest = (page, postsPerPage) => {\n    return async dispatch => {\n\n        dispatch(startRequest());\n\n        try {\n            let start = Math.ceil((page - 1) * postsPerPage);\n            let limit = postsPerPage;\n            let res = await axios.get(`${API_URL}/posts/range/${start}/${limit}`);\n            let payload = {\n                data: res.data.selectedPosts,\n                amount: res.data.amount,\n                postsPerPage: postsPerPage,\n                initialPage: page\n            };\n            dispatch(loadPostsByRange(payload));\n            dispatch(stopRequest());\n        } catch (err) {\n            dispatch(errorRequest(err.message));\n        }\n    }\n};\n\nexport const loadUserByLogin = login => {\n    return async dispatch => {\n\n        dispatch(startRequest());\n\n        try {\n            let res = await axios.get(`${API_URL}/users/login`, {params: {email: login.email}});\n\n            if (res.data !== null) {\n\n                if (res.data.password === login.password) {\n                    await dispatch(stopRequest());\n                    await dispatch(setLogin(true));\n                    await dispatch(setUser(res.data));\n                } else {\n                    dispatch(errorRequest(\"Wrong password!!!\"));\n                    setTimeout(() => dispatch(resetRequest()), 4000);\n                }\n            } else {\n                dispatch(errorRequest(\"User don't exist!!!\"));\n                setTimeout(() => dispatch(resetRequest()), 4000);\n            }\n        } catch (err) {\n            dispatch(errorRequest(err.message));\n            setTimeout(() => dispatch(resetRequest()), 4000);\n        }\n    }\n};\n\nexport const addUser = user => {\n    return async dispatch => {\n\n        dispatch(startRequest());\n\n        try {\n            await axios.post(`${API_URL}/users/add`, user);\n            dispatch(stopRequest());\n        } catch (err) {\n            await dispatch(errorRequest(`Something went wrong.\n             This email address probably already exists: ${err.message}`));\n            setTimeout(() => dispatch(resetRequest()), 4000);\n        }\n    }\n};\n\nexport const addCommentToPost = payload => {\n    return async dispatch => {\n\n        dispatch(beginSetVotes());\n\n        try {\n            let res = await axios.post(`${API_URL}/posts/comment`, payload);\n            dispatch(loadPost(res.data.post));\n            let loggedUser = await getUser(store.getState());\n\n            if (checkUserPosts(loggedUser, res.data.post.id)) {\n                dispatch(addUserComment(res.data.comment))\n            }\n            dispatch(stopRequest());\n        } catch (err) {\n            dispatch(errorRequest(err.message))\n        }\n    }\n};\n\nexport const removePostRequest = (id, userId) => {\n    return async dispatch => {\n        dispatch(startRequest());\n\n        try {\n            await axios.delete(`${API_URL}/posts/remove/${id}/${userId}`);\n            dispatch(removeUserPost(id));\n            dispatch(removeRequest(true));\n            await setTimeout(() => dispatch(removeRequest(false)), 4000);\n            dispatch(stopRequest());\n        } catch (err) {\n            dispatch(errorRequest(err.message))\n        }\n    }\n};\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {userPostsMode} from \"../../../redux/actions/requestActions\";\nimport PageTitle from '../../common/PageTitle/PageTitle';\nimport PostsCounter from '../../features/PostsCounter/PostsCounterContainer';\nimport Posts from '../../features/Posts/PostsContainer';\n\nconst PostPage = props => {\n    const {userPostsMode} = props;\n    userPostsMode(false);\n\n    return (\n        <div>\n            <PageTitle>Posts list</PageTitle>\n            <PostsCounter/>\n            <Posts isActive={true}/>\n        </div>\n    )\n};\n\nconst mapDispatchToProps = dispatch => ({\n    userPostsMode: isSet => dispatch(userPostsMode(isSet))\n});\n\nexport default connect(null, mapDispatchToProps)(PostPage);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {userPostsMode} from \"../../../redux/actions/requestActions\";\nimport PageTitle from '../../common/PageTitle/PageTitle';\nimport Posts from \"../../features/Posts/PostsContainer\";\n\nconst Home = props => {\n    const {userPostsMode} = props;\n    userPostsMode(false);\n\n    return (\n        <div>\n            <PageTitle>Last Posts</PageTitle>\n            <Posts isLastPosts={true}/>\n        </div>\n    )\n};\n\nconst mapDispatchToProps = dispatch => ({\n    userPostsMode: isSet => dispatch(userPostsMode(isSet))\n});\n\nexport default connect(null, mapDispatchToProps)(Home);\n","import React from 'react';\nimport PageTitle from '../../common/PageTitle/PageTitle';\n\nconst Contact = () => (\n    <div>\n        <PageTitle>Contact</PageTitle>\n        <p>Your Favourite Blooger</p>\n        <p>Rafal Pijet</p>\n        <p>stronglopez@wp.pl</p>\n    </div>\n);\n\nexport default Contact;\n","import React from 'react';\n\nconst PageNotFound = () => (\n    <div>\n        <h2>404 - Page Not Found</h2>\n    </div>\n);\n\nexport default PageNotFound;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './TextField.scss';\r\n\r\nconst TextField = ({ value, label, onChange, ...otherProps }) => {\r\n    return (\r\n  <label {...otherProps} className=\"text-field\">\r\n    <span className={`text-field__label ${(!value.length > 0) ? 'text-field__label--big' : ''}`}>{label}</span>\r\n    <input {...otherProps} value={value} onChange={onChange} className=\"text-field__input\" />\r\n  </label>\r\n)};\r\n\r\nTextField.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default TextField;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Redirect} from 'react-router';\nimport TextField from '../../common/TextField/TextField';\nimport Button from \"../../common/Button/Button\";\nimport SpinnerRequest from \"../../common/SpinnerRequest/SpinnerRequest\";\nimport Alert from \"../../common/Alert/Alert\";\n\nclass UserForm extends React.Component {\n\n    state = {\n        login: {\n            email: '',\n            password: ''\n        },\n        register: {\n            firstName: '',\n            lastName: '',\n            emailRegister: '',\n            passwordRegister: '',\n            confirmPassword: ''\n        },\n        isVisible: true,\n        isLogin: this.props.isLogin\n    };\n\n    componentDidMount() {\n        this.props.resetRequest();\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.request.error === null) {\n            this.setState({isVisible: true});\n        }\n    }\n\n    handleChange = event => {\n        const {login, register, isLogin} = this.state;\n        isLogin ? this.setState({login: {...login, [event.target.name]: event.target.value}}) :\n            this.setState({register: {...register, [event.target.name]: event.target.value}})\n    };\n\n    sendLoginData = event => {\n        const {loadUser, errorRequest, resetRequest, addUser} = this.props;\n        const {login, register, isLogin} = this.state;\n        event.preventDefault();\n        this.setState({isVisible: true});\n\n        if (isLogin) {\n\n            if (login.email.includes(\"@\")) {\n                loadUser(login);\n            } else {\n                errorRequest(\"You must enter an email adress\");\n                setTimeout(() => resetRequest(), 4000);\n            }\n        } else {\n            if (register.firstName.length && register.lastName) {\n\n                if (register.emailRegister.includes(\"@\")) {\n\n                    if (register.passwordRegister === register.confirmPassword && register.passwordRegister.length !== 0) {\n                        let user = {\n                            firstName: register.firstName,\n                            lastName: register.lastName,\n                            email: register.emailRegister,\n                            password: register.passwordRegister\n                        };\n                        addUser(user);\n                    } else {\n                        errorRequest(\"Check password\");\n                        setTimeout(() => resetRequest(), 4000);\n                    }\n                } else {\n                    errorRequest(\"You must enter an email adress\");\n                    setTimeout(() => resetRequest(), 4000);\n                }\n            }\n        }\n    };\n\n    countVisible = error => {\n        const {email} = this.state.login;\n\n        if (error === \"Wrong password!!!\") {\n            setTimeout(() => this.setState({\n                isVisible: false, login: {email: email, password: ''}\n            }), 3000);\n        } else {\n            setTimeout(() => this.setState({\n                isVisible: false, login: {email: '', password: ''}\n            }), 3000);\n        }\n    };\n\n    render() {\n        const {sendLoginData, handleChange, countVisible} = this;\n        const {email, password} = this.state.login;\n        const {firstName, lastName, emailRegister, passwordRegister, confirmPassword} = this.state.register;\n        const {isVisible, isLogin} = this.state;\n        const {request} = this.props;\n\n        if (request.success) {\n\n            if (!isLogin) {\n                return <Alert isVisible={isVisible} variant=\"success\">The user has been registered</Alert>\n            } else {\n                return <Redirect to=\"/\"/>\n            }\n        } else if (request.error !== null) {\n            countVisible(request.error);\n            return <Alert variant=\"error\" isVisible={isVisible}>{request.error}</Alert>\n        } else if (request.pending) {\n            return <SpinnerRequest/>\n        } else {\n            return (\n                <form>\n                    <TextField hidden={isLogin} label=\"first name\" onChange={handleChange}\n                               value={firstName} name=\"firstName\"/>\n                    <TextField hidden={isLogin} label=\"last name\" onChange={handleChange}\n                               value={lastName} name=\"lastName\"/>\n                    <TextField label=\"email\" type=\"email\" name={isLogin ? \"email\" : \"emailRegister\"}\n                               value={isLogin ? email : emailRegister} onChange={handleChange}/>\n                    <TextField label=\"password\" type=\"password\" name={isLogin ? \"password\" : \"passwordRegister\"}\n                               value={isLogin ? password : passwordRegister} onChange={handleChange}/>\n                    <TextField hidden={isLogin} label=\"confirm password\" onChange={handleChange} type=\"password\"\n                               value={confirmPassword} name=\"confirmPassword\"/>\n                    <Button onClick={event => sendLoginData(event)} variant=\"primary\">Send</Button>\n                </form>\n            )\n        }\n    }\n}\n\nUserForm.propTypes = {\n    request: PropTypes.object.isRequired,\n    loadUser: PropTypes.func.isRequired,\n    errorRequest: PropTypes.func.isRequired,\n    resetRequest: PropTypes.func.isRequired,\n    isLogin: PropTypes.bool.isRequired,\n    addUser: PropTypes.func.isRequired\n};\n\nexport default UserForm;\n","import {connect} from 'react-redux';\nimport UserForm from './UserForm';\nimport {loadUserByLogin, addUser} from \"../../../redux/thunks\";\nimport {getRequest, errorRequest, resetRequest} from \"../../../redux/actions/requestActions\";\n\nconst mapStateToProps = state => ({\n    request: getRequest(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    loadUser: login => dispatch(loadUserByLogin(login)),\n    errorRequest: error => dispatch(errorRequest(error)),\n    resetRequest: () => dispatch(resetRequest()),\n    addUser: user => dispatch(addUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserForm);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {resetRequest} from \"../../../redux/actions/requestActions\";\nimport PageTitle from \"../../common/PageTitle/PageTitle\";\nimport UserForm from \"../../features/UserForm/UserFormContainer\";\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.resetRequest();\n    }\n\n    render() {\n        return (\n            <div>\n                <PageTitle>Login</PageTitle>\n                <UserForm isLogin={true}/>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    resetRequest: () => dispatch(resetRequest())\n});\n\nexport default connect(null,mapDispatchToProps)(Login);\n","import React from 'react';\nimport PageTitle from \"../../common/PageTitle/PageTitle\";\nimport UserForm from \"../../features/UserForm/UserFormContainer\";\n\nconst Registration = () => (\n    <div>\n        <PageTitle>Registration</PageTitle>\n        <UserForm isLogin={false}/>\n    </div>\n);\n\nexport default Registration;\n","import React from 'react';\nimport PageTitle from \"../../common/PageTitle/PageTitle\";\n\nconst Welcome = () => (\n    <div>\n        <PageTitle>Welcome to the Blog</PageTitle>\n    </div>\n);\n\nexport default Welcome;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '../../common/TextField/TextField';\nimport Editor from 'react-medium-editor';\nimport 'medium-editor/dist/css/medium-editor.css';\nimport 'medium-editor/dist/css/themes/default.css';\nimport Button from \"../../common/Button/Button\";\nimport SectionTitle from \"../../common/SectionTitle/SectionTitle\";\nimport SpinnerRequest from \"../../common/SpinnerRequest/SpinnerRequest\";\nimport Alert from \"../../common/Alert/Alert\";\nimport './PostForm.scss';\nimport '../../common/TextField/TextField.scss';\n\nclass PostForm extends React.Component {\n    state = {\n        post: {\n            authorId: '',\n            title: '',\n            content: '',\n            author: `${this.props.user.firstName} ${this.props.user.lastName}`\n        }\n    };\n\n    componentDidMount() {\n        const {isEdit, resetRequest, singlePost} = this.props;\n        resetRequest();\n\n        if (isEdit) {\n            this.setState({post: singlePost});\n        }\n    }\n\n    handleChange = event => {\n        const {post} = this.state;\n        this.setState({post: {...post, [event.target.name]: event.target.value}})\n    };\n\n    handleEdit = text => {\n        const {post} = this.state;\n        this.setState({post: {...post, content: text}})\n    };\n\n    sendPost = event => {\n        const {addPost, updatePost, isEdit, user} = this.props;\n        const {post} = this.state;\n        event.preventDefault();\n        post.authorId = user.id;\n        isEdit ? updatePost(post) : addPost(post);\n    };\n\n    render() {\n        const {title, content, author} = this.state.post;\n        const {handleChange, handleEdit, sendPost} = this;\n        const {pending, error, success} = this.props.request;\n        const {isEdit, singlePost} = this.props;\n\n        if (success) {\n            return <Alert variant=\"success\">{`Post has been ${isEdit ? \"updated\" : \"added\"}!`}</Alert>\n        } else if (error !== null) {\n            return <Alert variant=\"error\">{error}</Alert>\n        } else if (Object.entries(singlePost).length === 0 && isEdit) {\n            return <Alert variant=\"error\">No Post to edit!</Alert>\n        } else if (pending) {\n            return <SpinnerRequest/>\n        } else {\n            return (\n                <form onSubmit={sendPost}>\n                    <TextField label=\"Title\" onChange={handleChange} value={title} name=\"title\"/>\n                    <label className=\"text-field\">\n                        <span className=\"text-field__label\">{\"Author\"}</span>\n                        <p className=\"text-field__input\" >{author}</p>\n                    </label>\n                    <SectionTitle>{`${isEdit ? \"Edit\" : \"Add\"} post content`}</SectionTitle>\n                    <Editor\n                        className=\"content-editor\"\n                        onChange={handleEdit}\n                        text={content}\n                        options={{\n                            placeholder: false,\n                            toolbar: {buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3']}\n                        }}\n                    />\n                    <Button variant=\"primary\">{`${isEdit ? \"Update\" : \"Add\"} Post`}</Button>\n                </form>\n            )\n        }\n    }\n}\n\nPostForm.propTypes = {\n    request: PropTypes.object.isRequired,\n    addPost: PropTypes.func.isRequired,\n    resetRequest: PropTypes.func.isRequired,\n    isEdit: PropTypes.bool.isRequired,\n    singlePost: PropTypes.object.isRequired,\n    updatePost: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired\n};\n\nexport default PostForm;\n","import {connect} from 'react-redux';\nimport PostForm from './PostForm';\nimport {addPostRequest, updatePostRequest} from \"../../../redux/thunks\";\nimport {getRequest, resetRequest} from \"../../../redux/actions/requestActions\";\nimport {getPost} from \"../../../redux/actions/postsActions\";\nimport {getUser} from \"../../../redux/actions/usersActions\";\n\nconst mapStateToProps = store => ({\n    request: getRequest(store),\n    singlePost: getPost(store),\n    user: getUser(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    addPost: post => dispatch(addPostRequest(post)),\n    resetRequest: () => dispatch(resetRequest()),\n    updatePost: post => dispatch(updatePostRequest(post))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);\n","import React from 'react';\nimport PageTitle from '../../common/PageTitle/PageTitle';\nimport PostForm from \"../../features/PostForm/PostFormatContainer\";\n\nconst AddPost = () => (\n    <div>\n        <PageTitle>Add post</PageTitle>\n        <PostForm isEdit={false}/>\n    </div>\n);\n\nexport default AddPost;\n","import React from 'react';\nimport {Modal as ModalStrap, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport Button from '../../common/Button/Button';\n\nclass Modal extends React.Component {\n    state = {\n        modal: false\n    };\n\n    componentWillReceiveProps(nextProps) {\n        const {setModal} = nextProps;\n        setModal ? this.setState({modal: setModal}) : this.setState({modal: setModal})\n    }\n\n    toggle = () => {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }))\n    };\n\n    render() {\n        const {modal} = this.state;\n        const {toggle} = this;\n        const {headerContent, bodyContent, confirmButton, confirmHandling} = this.props;\n        return (\n            <div>\n                <ModalStrap isOpen={modal} toggle={toggle}>\n                    <ModalHeader toggle={toggle}>{headerContent}</ModalHeader>\n                    <ModalBody>\n                        {bodyContent}\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button variant=\"danger\" onClick={confirmHandling}>{confirmButton}</Button>{' '}\n                        <Button variant=\"info\" onClick={toggle}>Cancel</Button>\n                    </ModalFooter>\n                </ModalStrap>\n            </div>\n        )\n    }\n}\n\nModal.propTypes = {\n    setModal: PropTypes.bool.isRequired,\n    headerContent: PropTypes.string.isRequired,\n    bodyContent: PropTypes.string.isRequired,\n    confirmButton: PropTypes.string.isRequired,\n    confirmHandling: PropTypes.func.isRequired\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CommentsList.scss';\n\nclass CommentsList extends React.Component {\n\n    countDate = dateAdded => {\n        let min = 0;\n        let hrs = 0;\n        let days = 0;\n        let different = (new Date() - new Date(dateAdded)) / 60000;\n\n        if (different >= 60 && different < 1440) {\n            hrs = Math.floor(different / 60);\n            min = (different % (hrs * 60)).toFixed(0);\n        } else if (different >= 1440) {\n            days = Math.floor(different / 1440);\n            let rest = different % (days * 1440);\n\n            if (rest >= 60) {\n                hrs = Math.floor(rest);\n                min = (rest % 60).toFixed(0);\n            } else {\n                min = rest.toFixed(0);\n            }\n        } else {\n            min = different.toFixed(0);\n        }\n\n        if (different.toFixed(0) > 0) {\n\n            if (days > 0) {\n                return `${days > 1 ? days + ' days' : days + ' day'} ago`;\n            } else if (hrs > 0 && days === 0) {\n                return `${hrs > 1 ? hrs + ' hours' : hrs + ' hour'} ago`\n            } else {\n                return `${min > 1 ? min + ' minutes' : min + ' minute'} ago`\n            }\n        } else {\n            return \"now\"\n        }\n    };\n\n    render() {\n        const {comments} = this.props;\n        const {countDate} = this;\n        return (\n            <div>\n                {comments.map((comment, i) => {\n                    return (\n                        <div className={`comment-item ${(i % 2 === 0) ? \"even-comment\" : \"\"}`} key={comment._id}>\n                            <div className=\"comment-info\">\n                                <p>{comment.author}</p>\n                                <p>{countDate(comment.dateAdded)}</p>\n                            </div>\n                            <p>{comment.content}</p>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nCommentsList.propsTypes = {\n    comments: PropTypes.arrayOf(\n        PropTypes.shape({\n            _id: PropTypes.string,\n            postId: PropTypes.string,\n            content: PropTypes.string.isRequired,\n            author: PropTypes.string.isRequired,\n            dateAdded: PropTypes.string.isRequired\n        })\n    )\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Comments.scss';\nimport Button from \"../../common/Button/Button\";\nimport CommentsList from '../CommentsList/CommentsList';\nimport Pagination from '../../common/Pagination/Pagination';\n\nclass Comments extends React.Component {\n    state = {\n        isAddVisible: false,\n        comment: '',\n        sortValue: \"newest\",\n        comments: this.props.singlePost.comments,\n        commentsForPage: [],\n        page: 1\n    };\n\n    componentDidMount() {\n        const {handleChange} = this;\n        const {page} = this.state;\n        handleChange(page);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const {comments} = nextProps.singlePost;\n        const {handlingSort} = this;\n\n        if (!nextProps.request.votes) {\n            const updateState = () => new Promise(resolve => resolve(\n                this.setState({\n                    isAddVisible: false,\n                    comment: '',\n                    comments: comments\n                })\n            ));\n            updateState()\n                .then(() => handlingSort());\n        }\n    }\n\n    handlingSort = async () => {\n        const {comments, sortValue, page} = this.state;\n        const {compareDatesFromOldest, compareDatesFromNewest, compareUsersAz, compareUsersZa, handleChange} = this;\n        let unsorted = [];\n        let sorted = [];\n\n        if (sortValue === \"oldest\" || sortValue === \"newest\") {\n            let temp = [];\n            comments.forEach(comment => {\n                let value = Date.parse(comment.dateAdded);\n                let item = {\n                    value: value,\n                    comment: comment\n                };\n                unsorted.push(item);\n            });\n            sortValue === \"oldest\" ? temp = unsorted.sort(compareDatesFromOldest) :\n                temp = unsorted.sort(compareDatesFromNewest);\n            temp.forEach(item => {\n                sorted.push(item.comment);\n            });\n        } else {\n            unsorted = comments;\n            sortValue === \"a-z\" ? sorted = unsorted.sort(compareUsersAz) :\n                sorted = unsorted.sort(compareUsersZa);\n        }\n        await this.setState({comments: sorted});\n        handleChange(page);\n    };\n\n    compareDatesFromOldest = (a, b) => {\n        let comparision = 0;\n\n        if (a.value > b.value) {\n            comparision = 1;\n        } else if (a.value < b.value) {\n            comparision = -1;\n        }\n        return comparision;\n    };\n\n    compareDatesFromNewest = (a, b) => {\n        let comparision = 0;\n\n        if (a.value < b.value) {\n            comparision = 1;\n        } else if (a.value > b.value) {\n            comparision = -1;\n        }\n        return comparision;\n    };\n\n    compareUsersAz = (a, b) => {\n        let comparision = 0;\n\n        if (a.author > b.author) {\n            comparision = 1;\n        } else if (a.author < b.author) {\n            comparision = -1;\n        }\n        return comparision\n    };\n\n    compareUsersZa = (a, b) => {\n        let comparision = 0;\n\n        if (a.author < b.author) {\n            comparision = 1;\n        } else if (a.author > b.author) {\n            comparision = -1;\n        }\n        return comparision\n    };\n\n    handleSortType = async event => {\n        const {handlingSort} = this;\n        await this.setState({sortValue: event.target.value});\n        handlingSort();\n    };\n\n    handleComment = event => {\n        this.setState({comment: event.target.value});\n    };\n\n    handleAddComment = () => {\n        const {id} = this.props.singlePost;\n        const {addComment, user} = this.props;\n        const {comment} = this.state;\n        let payload = {\n            postId: id,\n            content: comment,\n            author: `${user.firstName} ${user.lastName}`\n        };\n\n        if (comment.length !== 0) {\n            addComment(payload);\n        }\n    };\n\n    handleChange = async page => {\n        const {comments} = this.state;\n        let begin = (page - 1) * 10;\n        await this.setState({\n            commentsForPage: comments.slice(begin, begin + 10),\n            page: page\n        });\n    };\n\n    render() {\n        const {isAddVisible, comment, sortValue, comments, commentsForPage, page} = this.state;\n        const {handleComment, handleAddComment, handleSortType} = this;\n        const {amount, request} = this.props;\n\n        return (\n            <div className=\"comments-main\">\n                <div className=\"comments-info\">\n                    <p>{amount} {amount === 1 ? \"comment\" : \"comments\"}</p>\n                    <div>\n                        <label htmlFor=\"selectSort\">Sort by: </label>\n                        <select id=\"selectSort\" value={sortValue} onChange={handleSortType}>\n                            <optgroup label=\"Sort Type\">\n                                <option value=\"newest\">Newest</option>\n                                <option value=\"oldest\">Oldest</option>\n                                <option value=\"a-z\">User A-Z</option>\n                                <option value=\"z-a\">User Z-A</option>\n                            </optgroup>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"comments-edit\">\n                    <input\n                        placeholder=\"Add comment...\"\n                        onClick={() => this.setState({isAddVisible: true})}\n                        onChange={handleComment}\n                        value={comment}\n                    />\n                    <Button\n                        variant={`${request.votes ? \" comments-progress\" : \"success\"} add-button`}\n                        disabled={request.votes}\n                        hidden={!isAddVisible}\n                        onClick={handleAddComment}\n                    >Add</Button>\n                </div>\n                <CommentsList comments={commentsForPage}/>\n                <Pagination isActive={true} pages={Math.ceil(comments.length / 10)}\n                            onPageChange={this.handleChange} presentPage={page}/>\n            </div>\n        )\n    }\n}\n\nComments.propTypes = {\n    singlePost: PropTypes.object.isRequired,\n    request: PropTypes.object.isRequired,\n    user: PropTypes.object.isRequired,\n    addComment: PropTypes.func.isRequired,\n    amount: PropTypes.number.isRequired,\n};\n\nexport default Comments;\n","import {connect} from \"react-redux\";\nimport Comments from './Comments';\nimport {getPost, getAmountOfComments} from \"../../../redux/actions/postsActions\";\nimport {getRequest} from \"../../../redux/actions/requestActions\";\nimport {getUser} from \"../../../redux/actions/usersActions\";\nimport {addCommentToPost} from \"../../../redux/thunks\";\n\nconst mapStateToProps = store => ({\n    singlePost: getPost(store),\n    request: getRequest(store),\n    user: getUser(store),\n    amount: getAmountOfComments(store)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    addComment: payload => dispatch(addCommentToPost(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {Redirect} from \"react-router\";\nimport SmallTitle from '../../common/SmallTitle/SmallTitle';\nimport SectionTitle from \"../../common/SectionTitle/SectionTitle\";\nimport HtmlBox from \"../../common/HtmlBox/HtmlBox\";\nimport Button from \"../../common/Button/Button\";\nimport SpinnerRequest from '../../common/SpinnerRequest/SpinnerRequest';\nimport Alert from '../../common/Alert/Alert';\nimport Modal from '../../common/Modal/Modal';\nimport Comments from '../Comments/CommentsContainer';\nimport './PostItem.scss';\n\nclass PostItem extends React.Component {\n    state = {\n        singlePost: \"\",\n        modal: false\n    };\n\n    componentDidMount() {\n        const {singleHandling, randomHandling} = this;\n        const {isRandom} = this.props;\n        isRandom ? randomHandling() : singleHandling();\n    }\n\n    singleHandling = async () => {\n        const {loadPost, id} = this.props;\n        await loadPost(id);\n        await this.setState({singlePost: this.props.singlePost});\n    };\n\n    randomHandling = async () => {\n        const {randomPost} = this.props;\n        await randomPost();\n        await this.setState({singlePost: this.props.singlePost});\n    };\n\n    removeHandling = () => {\n        this.setState({modal: true})\n    };\n\n    confirmHandling = () => {\n        const {removePost, user} = this.props;\n        const {id} = this.state.singlePost;\n        this.setState({modal: false});\n        removePost(id, user.id);\n    };\n\n    render() {\n        const {singlePost, modal} = this.state;\n        const {request, user, isRandom} = this.props;\n        const {randomHandling, removeHandling, confirmHandling} = this;\n\n        if (request.remove) {\n            return <Redirect to='/user'/>\n        } else if ((!request.pending && request.success) || (request.votes)) {\n            return (\n                <div>\n                    <SmallTitle>{singlePost.title}</SmallTitle>\n                    <div className=\"author-row\">\n                        <span>author: </span>\n                        <SectionTitle>{singlePost.author}</SectionTitle>\n                    </div>\n                    <HtmlBox>{singlePost.content}</HtmlBox>\n                    <Link hidden={isRandom || singlePost.author !== `${user.firstName} ${user.lastName}`}\n                          to=\"/posts/edit\">\n                        <Button variant=\"primary\">Edit Post</Button>\n                    </Link>\n                    <Button hidden={!request.userPosts}\n                            variant=\"danger\"\n                            onClick={() => removeHandling()}>Remove post\n                    </Button>\n                    <Button hidden={!isRandom}\n                            onClick={() => randomHandling()}\n                            variant=\"primary\">Random Post\n                    </Button>\n                    <Link hidden={isRandom} to={`${request.userPosts ? \"/user\" : \"/posts\"}`}>\n                        <Button variant=\"info\">{`Back to ${request.userPosts ? \"user posts\" : \"posts\"}`}</Button>\n                    </Link>\n                    <Modal setModal={modal} headerContent=\"Are you sure?\" confirmButton=\"Confirm remove\"\n                           bodyContent=\"Confirmation will permanently delete the selected post ...\"\n                           confirmHandling={confirmHandling}/>\n                    {singlePost !== '' ? <Comments/> : ''}\n                </div>\n            )\n        } else if (request.pending && request.success === null) {\n            return <SpinnerRequest/>\n        } else if (!request.pending && !request.success && request.error !== null) {\n            return <Alert variant={request.error.includes(\"don't exist\") ? \"warning\" : \"error\"}>\n                {request.error}</Alert>\n        } else {\n            return <SpinnerRequest/>\n        }\n    }\n\n}\n\nPostItem.propTypes = {\n    singlePost: PropTypes.shape({\n        id: PropTypes.string,\n        title: PropTypes.string,\n        content: PropTypes.string,\n        author: PropTypes.string,\n        votes: PropTypes.number,\n        comments: PropTypes.array\n    }),\n    request: PropTypes.object.isRequired,\n    loadPost: PropTypes.func.isRequired,\n    removePost: PropTypes.func.isRequired,\n    id: PropTypes.string,\n    isRandom: PropTypes.bool.isRequired,\n    presentPage: PropTypes.number.isRequired,\n    user: PropTypes.object.isRequired\n};\n\nexport default PostItem;\n","import {connect} from 'react-redux';\nimport PostItem from './PostItem';\nimport {loadPostRequest, randomPostRequest, removePostRequest} from \"../../../redux/thunks\";\nimport {getPost, getInitialPaginationPage} from \"../../../redux/actions/postsActions\";\nimport {getUser} from \"../../../redux/actions/usersActions\";\nimport {getRequest} from \"../../../redux/actions/requestActions\";\n\nconst mapDispatchToProps = dispatch => ({\n    loadPost: id => dispatch(loadPostRequest(id)),\n    randomPost: () => dispatch(randomPostRequest()),\n    removePost: (id, userId) => dispatch(removePostRequest(id, userId))\n});\n\nconst mapStateToProps = store => ({\n    singlePost: getPost(store),\n    request: getRequest(store),\n    presentPage: getInitialPaginationPage(store),\n    user: getUser(store)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostItem);\n\n","import React from 'react';\nimport PageTitle from '../../common/PageTitle/PageTitle';\nimport PostItem from \"../../features/PostItem/PostItemContainer\";\n\nconst RandomPost = () => (\n    <div>\n        <PageTitle>Random Post</PageTitle>\n        <PostItem isRandom={true}/>\n    </div>\n);\n\nexport default RandomPost;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PageTitle from '../../common/PageTitle/PageTitle';\nimport PostItem from '../../features/PostItem/PostItemContainer';\n\nconst SinglePost = props => {\n\n    return (\n        <div>\n            <PageTitle>Single Post</PageTitle>\n            <PostItem isRandom={false} id={props.match.params.id}/>\n        </div>\n    )\n};\n\nSinglePost.propTypes = {\n    id: PropTypes.string\n};\n\nexport default SinglePost;\n","import React from 'react';\nimport PageTitle from \"../../common/PageTitle/PageTitle\";\nimport PostForm from \"../../features/PostForm/PostFormatContainer\";\n\nconst EditPost = () => (\n    <div>\n        <PageTitle>Edit Post</PageTitle>\n        <PostForm isEdit={true}/>\n    </div>\n);\n\nexport default EditPost\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {getRequest, userPostsMode} from \"../../../redux/actions/requestActions\";\nimport {getInitialPaginationPage, setInitialPage} from \"../../../redux/actions/postsActions\";\nimport {getAmountUserPosts} from \"../../../redux/actions/usersActions\";\nimport PageTitle from \"../../common/PageTitle/PageTitle\";\nimport Posts from \"../../features/Posts/PostsContainer\";\nimport PostsCounter from \"../../features/PostsCounter/PostsCounterContainer\";\nimport Alert from '../../common/Alert/Alert';\n\nclass UserPosts extends React.Component {\n\n    state = {\n        isVisible: false\n    };\n\n    componentDidMount() {\n        const {userPostsMode, setInitialPage, initialPage, userPostsAmount, request} = this.props;\n        userPostsMode(true);\n\n        if (Math.ceil(userPostsAmount / 3) < initialPage) {\n            setInitialPage(1);\n        }\n\n        if (request.remove) {\n            this.setState({isVisible: true});\n            setTimeout(() => this.setState({isVisible: false}), 3000);\n        }\n    }\n\n    render() {\n        const {remove} = this.props.request;\n        const {isVisible} = this.state;\n\n        return (\n            <div>\n                <PageTitle>User Posts</PageTitle>\n                <PostsCounter/>\n                {remove ? <Alert isVisible={isVisible} variant=\"success\">Post has removed</Alert> : <Posts isActive={true} isUserPosts={true} postsPerPage={3}/>}\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    userPostsMode: isSet => dispatch(userPostsMode(isSet)),\n    setInitialPage: value => dispatch(setInitialPage(value))\n});\n\nconst mapStateToProps = state => ({\n    initialPage: getInitialPaginationPage(state),\n    userPostsAmount: getAmountUserPosts(state),\n    request: getRequest(state)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPosts);\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {setLogin} from \"../../../redux/actions/usersActions\";\nimport {resetRequest} from \"../../../redux/actions/requestActions\";\nimport {Redirect} from \"react-router\";\n\nconst Logout = props => {\n    const {setLogin, resetRequest} = props;\n    setLogin(false);\n    resetRequest();\n    return (\n        <div>\n            <Redirect to=\"/\"/>\n        </div>\n\n    )\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setLogin: isLogin => dispatch(setLogin(isLogin)),\n    resetRequest: () => dispatch(resetRequest())\n});\n\nexport default connect(null, mapDispatchToProps)(Logout);\n","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport {getLogin, getUser} from \"./redux/actions/usersActions\";\nimport MainLayout from './components/layouts/MainLayout/MainLayout';\nimport PostPage from './components/pages/Posts/PostPage';\nimport Home from './components/pages/Home/Home';\nimport Contact from './components/pages/Contact/Contact';\nimport PageNotFound from './components/pages/PageNotFound/PageNotFound';\nimport Login from './components/pages/Login/Login';\nimport Registration from './components/pages/Registration/Registration';\nimport Welcome from './components/pages/Welcome/Welcome';\nimport AddPost from './components/pages/AddPost/AddPost';\nimport RandomPost from './components/pages/RandomPost/RandomPost';\nimport SinglePost from './components/pages/SinglePost/SinglePost';\nimport EditPost from './components/pages/EditPost/EditPost';\nimport UserPosts from './components/pages/UserPosts/UserPosts';\nimport Logout from './components/pages/Logout/Logout';\n\nclass App extends React.Component {\n\n    render() {\n        let {isLogin, loggedUser} = this.props;\n\n        if (isLogin) {\n            return (\n                <MainLayout isLogin={isLogin} loggedUser={loggedUser}>\n                    <Switch>\n                        <Route path=\"/\" exact component={Home}/>\n                        <Route path=\"/posts\" exact component={PostPage}/>\n                        <Route path=\"/posts/new\" exact component={AddPost}/>\n                        <Route path=\"/posts/edit\" exact component={EditPost}/>\n                        <Route path=\"/posts/random\" exact component={RandomPost}/>\n                        <Route path=\"/posts/:id\" exact component={SinglePost}/>\n                        <Route path=\"/contact\" exact component={Contact}/>\n                        <Route path=\"/user\" exact component={UserPosts}/>\n                        <Route path=\"/logout\" exact component={Logout}/>\n                        <Route component={PageNotFound}/>\n                    </Switch>\n                </MainLayout>\n            )\n        } else {\n            return (\n                <MainLayout isLogin={isLogin}>\n                    <Switch>\n                        <Route path=\"/\" exact component={Welcome}/>\n                        <Route path=\"/login\" exact component={Login}/>\n                        <Route path=\"/registration\" exact component={Registration}/>\n                        <Route component={PageNotFound}/>\n                    </Switch>\n                </MainLayout>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = state => ({\n    isLogin: getLogin(state),\n    loggedUser: getUser(state)\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\nimport './styles/global.scss';\nimport 'animate.css/animate.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Root = () => (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n\n);\n\n\nReactDOM.render(<Root/>, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/blog.a8b261f7.jpg\";"],"sourceRoot":""}